#!/bin/bash

DAEMON_TIMEOUT=3600
INTERVAL=0.5

if ! which inotifywait git rsync >/dev/null; then
    echo One of: inotifywait git rsync is not installed! >&2
    exit 100
fi

function usage {
    echo "Usage: $0 (--init remotehost|command [arg...])" >&2
    exit 99
}
if [ -z "$1" ]; then
    usage
fi

GITROOT="$(realpath "$(git rev-parse --show-toplevel 2>/dev/null)" 2>/dev/null)"
if [ -z "$GITROOT" ]; then
    echo "Not in a git project!" >&2
    exit 98
fi

PROJNAME="$(echo "$GITROOT" | tr / - | cut -c2-)"
PROJFILE="$HOME/.local/share/rp/$PROJNAME"

RUNDIR="${XDG_RUNTIME_DIR:-/run/user/${UID}}"
PROJPIDFILE="$RUNDIR/rp/$PROJNAME.pid"

REMOTELOC="$(cat "$PROJFILE" 2>/dev/null)"
REMOTEDIR="$(echo "$REMOTELOC" | cut -d':' -f2)"

function runcmd {
    if echo "$REMOTELOC" | grep -q '[:]'; then
        # shellcheck disable=SC2029
        ssh "$(echo "$REMOTELOC" | cut -d':' -f1)" "$*"
    else
        $SHELL -c "$*"
    fi
}

function check_daemon {
    if [ -d "$RUNDIR" ]; then
        mkdir -p "$(dirname "$PROJPIDFILE")"
    else
        echo "XDG_RUNTIME_DIR $RUNDIR doesn't exist. WTF?" >&2
        exit 89
    fi

    ourproc="/proc/$(cat "$PROJPIDFILE" 2>/dev/null)"
    if [ -f "$PROJPIDFILE" ] && [ -f "$ourproc/cmdline" ] &&
           tr -d '\0' <"$ourproc/cmdline" | grep -Eq 'bash.+rp--runasdaemon$' &&
           [ "$(readlink "$ourproc/cwd")" = "$GITROOT" ]; then
        return #Already running.
    fi
    rm -f "$PROJPIDFILE"
    echo "Starting rp daemon. Logging to $PROJFILE.log"
    (cd "$GITROOT" || exit 98; setsid "$0" --runasdaemon &>"$PROJFILE.log" < /dev/null &)

    #XXX Catch daemon failure to start here somehow.
    while [ ! -f "$PROJPIDFILE" ]; do
        sleep 0.01
    done
}

if [ "$1" = '--init' ]; then
    if [ -z "$2" ]; then
        usage
    fi

    mkdir -p "$(dirname "$PROJFILE")"

    if echo "$2" | grep -q '[:]'; then #Full host:/path/to/remotedir
        REMOTELOC="$(echo "$2" | cut -d':' -f1):$(realpath "$(echo "$2" | cut -d':' -f2)")"
    elif echo "$2" | grep -q '[/]'; then #Local /path/to/remotedir
        REMOTELOC="$(realpath "$2")"
    else #Just the hostname
        REMOTELOC="$2:$GITROOT" #GITROOT is already a realpath.
    fi
    REMOTEDIR="$(echo "$REMOTELOC" | cut -d':' -f2)"

    if runcmd "[ ! -d \"$REMOTEDIR\" ]"; then
        echo "Destination directory $REMOTELOC doesn't exist!" >&2
        exit 88
    fi

    echo "$REMOTELOC" > "$PROJFILE"

    check_daemon

    exit 0
elif [ "$1" = '--killdaemon' ]; then
    #XXX Check that the PID is our process first!
    [ -f "$PROJPIDFILE" ] && exec kill "$(cat "$PROJPIDFILE")"
    exit 0
elif [ "$1" = '--uninit' ]; then
    rm -f "$PROJFILE" "$PROJFILE.log"
    exit 0
elif [ "$1" != '--runasdaemon' ]; then #Run remote command
    check_daemon

    (
        if ! flock -o 9; then
            echo "flock of $PROJFILE for command failed: $?" >&2
            exit 60
        fi
        LPWD="$(pwd)"
        REL=${LPWD:${#GITROOT}}
        CMD="cd \"$REMOTEDIR$REL\"; "
        for p in "$@"; do
            CMD="$CMD \"$p\""
        done
        runcmd "$CMD"
    ) 9<"$PROJFILE" || exit $?

    exit 0
fi

##
## Daemon
##

#XXX Filter out some obvious .gitignores from inotify watchlist. Need to restart if
#    .gitignore changes (do we sync pending changes first? Probably?)
#    git ls-files --exclude-standard -coi --directory | grep '/$'

echo "Daemon started. Syncing to $REMOTELOC"

# shellcheck disable=SC2086
coproc inotifywait -q -r -m --format "%w%f" -e modify -e attrib -e close_write -e move -e create -e delete .

trap 'rm -f $PROJPIDFILE; kill -9 $COPROC_PID' EXIT
OURPID="$$"

#Initial sync
(
    if ! flock 9; then
            echo "flock of $PROJFILE failed: $?" >&2
            exit 78
    fi
    echo $OURPID > "$PROJPIDFILE" #Do it inside the lock, so it can't race with running a command.

    echo "Initial rsync"
    if ! rsync -avuzAX --files-from=<(git ls-files --exclude-standard -co; find .git) \
         . "$REMOTELOC"; then
        echo Initial rsync failed! >&1
        exit 79
    fi

    join -v 2 \
         <((git ls-files --exclude-standard -co; find .git) | sort) \
         <(runcmd "cd \"$REMOTEDIR\"; (git ls-files --exclude-standard -co; find .git) | sort") \
        | runcmd "cd \"$REMOTEDIR\"; xargs rm -rf"
) 9<"$PROJFILE" || exit $?

#Incremental sync
echo "Going incremental"
while true; do
    if ! IFS= read -r -t $DAEMON_TIMEOUT filename; then
        echo "Daemon exiting due to inactivity after $DAEMON_TIMEOUT seconds."
        exit #timeout/EOF
    fi
    (
        if ! flock 9; then
            echo "flock of $PROJFILE failed for incremental: $?" >&2
            exit 77
        fi

        unset allfiles files
        declare -A allfiles
        allfiles[$filename]=1

        while IFS= read -r -t $INTERVAL filename; do
            allfiles[$filename]=1
        done

        readarray -t files < <(printf '%s\n' "${!allfiles[@]}" \
                                   | git check-ignore -v -n --stdin | \
                                   awk '/^::\t/ {sub(/^::\t/,""); print}')

        echo About to sync: "${files[@]}"

        if [ ${#files[@]} -gt 0 ]; then
            #XXX--ignore-errors? --force?
            if ! rsync -avuzAX --delete --ignore-missing-args --delete-missing-args \
                 --files-from=<(printf '%s\n' "${files[@]}") . "$REMOTELOC"; then
                echo "Incremental rsync failed!" >&1
                exit 76
            fi
        fi
        ) 9<"$PROJFILE" || exit $?
done <&"${COPROC[0]}"
